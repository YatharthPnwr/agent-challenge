/**
 * GitHub Reporter Workflow
 * ------------------------
 * This is the main workflow file that combines all GitHub reporter tools
 * into a unified agent that can analyze repositories, generate visualizations,
 * and help with contribution guidance.
 *
 * Tools included:
 * - GitHub Repository Stats
 * - Repository Visualization
 * - Good First Issues
 * - Good First Issues with Detailed Guides
 */

import { createWorkflow, createStep } from "@mastra/core/workflows";
import { z } from "zod";
import { getGitHubRepoStats } from "./github-statistics-tool";

// Create a step that can handle repository analysis
const analyzeRepository = createStep({
	id: "analyze-repository",
	description: "Analyze a GitHub repository and return comprehensive statistics",
  inputSchema: z.object({
		repoUrl: z.string().describe("GitHub repository URL"),
	}),
	outputSchema: z.object({
		analysis: z.string(),
  }),
  execute: async ({ inputData }) => {
    if (!inputData) {
      throw new Error("Input data not found");
    }

		const result = await getGitHubRepoStats(inputData.repoUrl);
		
		// Format the result as a markdown report
		const analysis = `# 📊 Repository Analysis: ${result.repository.fullName}

## 🎯 Repository Overview
- **Name**: ${result.repository.name}
- **Full Name**: ${result.repository.fullName}
- **Owner**: ${result.repository.owner} (${result.repository.ownerType})
- **Description**: ${result.repository.description || "No description available"}

## 📈 Statistics
- ⭐ **Stars**: ${result.statistics.stars.toLocaleString()}
- 🍴 **Forks**: ${result.statistics.forks.toLocaleString()}
- 🐛 **Open Issues**: ${result.statistics.openIssues.toLocaleString()}
- 👀 **Watchers**: ${result.statistics.watchers.toLocaleString()}
- 💻 **Primary Language**: ${result.statistics.primaryLanguage || "Not specified"}

## 👥 Top Contributors
${result.contributors.map(contributor => 
	`- **${contributor.username}**: ${contributor.contributions} contributions`
).join('\n')}

## 🔄 Activity
- **Last Push**: ${new Date(result.activity.lastPush).toLocaleDateString()}
- **Last Update**: ${new Date(result.activity.lastUpdate).toLocaleDateString()}
- **Created**: ${new Date(result.activity.createdAt).toLocaleDateString()}

## 📝 Pull Requests
- **Open**: ${result.pullRequests.open}
- **Closed**: ${result.pullRequests.closed}
- **Total**: ${result.pullRequests.total}

## 📄 License
${result.license ? `- **${result.license.name}** (${result.license.spdxId})` : "- No license specified"}

## 🔒 Status
- **Private**: ${result.status.isPrivate ? "Yes" : "No"}
- **Archived**: ${result.status.isArchived ? "Yes" : "No"}
- **Disabled**: ${result.status.isDisabled ? "Yes" : "No"}

---

*Analysis generated by GitHub Reporter Agent* 🌟`;

		return { analysis };
  },
});

export const githubReporterWorkflow = createWorkflow({
  id: "github-reporter-workflow",
  inputSchema: z.object({
		repoUrl: z.string().describe("GitHub repository URL to analyze"),
  }),
  outputSchema: z.object({
		analysis: z.string(),
  }),
})
.then(analyzeRepository);

githubReporterWorkflow.commit();